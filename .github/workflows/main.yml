name: Build and push docker image

on:
    push:
        branches:
            - master
        tags:
            - 'v[0-9]+.[0-9]+'
            - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v1
              with:
                  fetch-depth: '0'

            - uses: actions-rs/toolchain@v1
              with:
                  toolchain: nightly
                  override: true

            - run: echo "::set-output name=version::$(rustc --version)"
              id: rust-version
            - uses: actions/cache@v1
              with:
                  path: ~/.cargo/registry/index
                  key: index-${{ runner.os }}-${{ github.run_number }}
                  restore-keys: |
                      index-${{ runner.os }}-

            - run: cargo generate-lockfile
            - uses: actions/cache@v1
              with:
                  path: ~/.cargo/registry/cache
                  key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
            - run: cargo fetch
            - uses: actions/cache@v1
              with:
                  path: target
                  key: test-target-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}y

            - uses: actions-rs/cargo@v1
              with:
                  command: test
                  args: --all-features --no-fail-fast
              env:
                  CARGO_INCREMENTAL: '0'
                  RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
                  RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

            - uses: actions-rs/grcov@v0.1
            - uses: codecov/codecov-action@v1

    build:
        name: Build docker image
        runs-on: ubuntu-latest
        steps:
            - name: Check out the repo
              uses: actions/checkout@v2

            - name: Prepare
              id: prep
              run: |
                  DOCKER_IMAGE=alekitto/zephir
                  VERSION=noop
                  if [ "${{ github.event_name }}" = "schedule" ]; then
                    VERSION=nightly
                  elif [[ $GITHUB_REF == refs/tags/* ]]; then
                    VERSION=${GITHUB_REF#refs/tags/}
                  elif [[ $GITHUB_REF == refs/heads/* ]]; then
                    VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
                    if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
                      VERSION=edge
                    fi
                  elif [[ $GITHUB_REF == refs/pull/* ]]; then
                    VERSION=pr-${{ github.event.number }}
                  fi
                  TAGS="${DOCKER_IMAGE}:${VERSION}"
                  if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
                    MINOR=${VERSION%.*}
                    MAJOR=${MINOR%.*}
                    TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
                  elif [ "${{ github.event_name }}" = "push" ]; then
                    TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
                  fi
                  echo ::set-output name=version::${VERSION}
                  echo ::set-output name=tags::${TAGS}
                  echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Login to DockerHub
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.REGISTRY_USERNAME }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            - name: Cache Docker layers
              uses: actions/cache@v2
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: Build and push
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: ./Dockerfile
                  platforms: linux/amd64,linux/arm64
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.prep.outputs.tags }}
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,dest=/tmp/.buildx-cache-new
                  labels: |
                      org.opencontainers.image.title=${{ github.event.repository.name }}
                      org.opencontainers.image.description=${{ github.event.repository.description }}
                      org.opencontainers.image.url=${{ github.event.repository.html_url }}
                      org.opencontainers.image.source=${{ github.event.repository.clone_url }}
                      org.opencontainers.image.version=${{ steps.prep.outputs.version }}
                      org.opencontainers.image.created=${{ steps.prep.outputs.created }}
                      org.opencontainers.image.revision=${{ github.sha }}
                      org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

            - name: Move cache
              run: |
                  rm -rf /tmp/.buildx-cache
                  mv /tmp/.buildx-cache-new /tmp/.buildx-cache
